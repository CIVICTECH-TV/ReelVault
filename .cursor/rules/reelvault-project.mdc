---
description: 
globs: 
alwaysApply: true
---
# ReelVault プロジェクト Cursor ルール

## プロジェクト情報

### リポジトリ設定
- **組織**: CIVICTECH-TV
- **リポジトリ**: ReelVault
- **URL**: https://github.com/CIVICTECH-TV/ReelVault
- **デフォルトブランチ**: main

### GitHub Projects
- **プロジェクト名**: ReelVault Development
- **プロジェクトID**: PVT_kwDODIBDzM4A7Mog
- **番号**: #5
- **所有者**: CIVICTECH-TV組織
- **リンク**: GitHub Projects内でIssue管理・進捗追跡

### Issue管理設定
- **Epic構造**: Epic → Story/Task の階層管理
- **ラベル戦略**: `epic`, `story`, `task` + 技術ラベル
- **マイルストーン**: Phase 1, Phase 2... でフェーズ管理
- **プロジェクト連携**: 全IssueをReelVault Developmentプロジェクトに関連付け
- **関係性管理**: Epic内Tasklist + 子Issue相互参照コメント

## 基本方針
- 常に日本語で回答する
- GitHub Issues管理とプロジェクト運営のベストプラクティスに従う
- 実践的で具体的なソリューションを提供する
- エラー発生時は即座に修復方法を提案する

## GitHub Issues管理のベストプラクティス

### Epic-Issue階層構造設計
- **Epic Issue**: 大きな機能単位でグループ化（例：インフラ基盤、ファイル処理エンジン）
- **Story/Task Issue**: Epic内の具体的なタスク
- **関係性**: Epic内にTasklistでチェックボックス形式、子IssueにParent Epic参照を記載
- **依存関係**: Issue本文内の「関係性」セクションで明記

### Issue内容構造
```markdown
## 概要
[簡潔な1-2行の説明]

## 詳細
[技術的詳細・要件・制約]

### 主要機能/コンポーネント
- [項目1]: [説明]
- [項目2]: [説明]

### 技術要件
- [技術スタック]
- [必要なライブラリ・ツール]

## 完了条件
- [ ] [具体的なタスク1]
- [ ] [具体的なタスク2]

## 関係性
**Parent Epic**: #[Epic Issue番号]

This issue is part of Epic #[番号]. Please check the Epic for overall progress and context.
```

### ラベル戦略
- **階層ラベル**: `epic`, `story`, `task`
- **技術ラベル**: `tauri`, `rust`, `aws`, `infrastructure`
- **状態ラベル**: `ready`, `in-progress`, `blocked`
- **優先度**: 必要に応じて`high-priority`, `low-priority`

### マイルストーン管理
- **統一マイルストーン**: 開発フェーズごと（例：Phase 1）
- **期限設定**: 現実的な期限（例：3ヶ月）
- **進捗追跡**: アクティブなIssueのみマイルストーン設定
- **クリーンアップ**: 完了・不要Issueはマイルストーン除去

## GitHub API操作のベストプラクティス

### 安全なAPI操作
```python
# 文字化け回避：ファイルベースでJSON送信
temp_file = f"/tmp/issue_update.json"
with open(temp_file, 'w', encoding='utf-8') as f:
    json.dump(data, f, ensure_ascii=False, indent=2)

cmd = f'gh api repos/{repo}/issues/{number} --input {temp_file}'
```

### エラーハンドリング
- **API制限**: 処理間に`time.sleep(0.5)`
- **エンコーディング**: `encoding='utf-8'`指定
- **エラー分類**: 4xx（クライアント）vs 5xx（サーバー）
- **リトライ戦略**: 一時的エラーに対するリトライ

### バッチ処理
- **進捗表示**: 処理中Issue番号・タイトル表示
- **結果集計**: 成功・失敗・スキップ数を集計
- **部分実行**: 失敗した場合の再実行可能性

## プロジェクト移行のベストプラクティス

### 技術スタック移行時
1. **新技術用ラベル追加**: 移行先技術のラベル作成
2. **不要Issue削除**: 旧技術関連Issueのクローズ・除去
3. **新Issue作成**: 新技術に特化したIssue作成
4. **関係性再構築**: Epic-Issue関係の再設定

### Issue内容移行
- **内容復元**: 文字化け時の正しい内容での復元
- **構造統一**: 全Issueで統一されたマークダウン構造
- **関係性保持**: Epic Tasklist + 相互参照コメント

### プロジェクト状態リセット
- **マイルストーンクリーンアップ**: 古いIssueからマイルストーン除去
- **進捗率リセット**: 新フェーズ開始時の0%状態
- **アクティブIssue特定**: 現在の開発対象のみ残す

## GitHub CLI (gh) 活用

### 基本コマンドパターン
```bash
# Issue一覧取得
gh api repos/{owner}/{repo}/issues --paginate

# Issue更新
gh api repos/{owner}/{repo}/issues/{number} --input file.json

# マイルストーン除去
{"milestone": null}  # 空文字列ではなくnull

# ラベル追加
gh api repos/{owner}/{repo}/issues/{number}/labels -f labels[]="label-name"
```

### JSON操作
- **null値**: `{"field": null}` でフィールドクリア
- **配列追加**: `{"labels": ["label1", "label2"]}`
- **エスケープ回避**: ファイルベース更新推奨

## バージョン・リリース管理

### バージョン管理方針 (`v0`段階)

`v1.0.0`として最初の安定版をリリースするまでは、バージョンを **`v0.MINOR.PATCH`** の形式で管理します。

- **`PATCH` (`v0.1.0` → `v0.1.1`)**:
  - **対象**: バグ修正、ドキュメント更新など、後方互換性を壊さない**小さな修正**。
  - ユーザーから見て機能的な変化はありません。

- **`MINOR` (`v0.1.0` → `v0.2.0`)**:
  - **対象**: 新機能の追加、既存機能の変更、APIの変更、依存関係の更新など、**何かしら新しいことが起こった**場合。
  - `v0`段階では、互換性を壊す変更も`MINOR`を上げます。

- **`v1.0.0`**:
  - **対象**: 主要機能が一通り安定して動作する**最初の安定版（MVP）**が完成したと判断した時。

### バージョン情報の連携

アプリケーションのバージョン情報は **`src-tauri/Cargo.toml`** を「唯一の真実」とします。

1.  **定義**: `src-tauri/Cargo.toml`内の`version = "x.y.z"`でバージョンを定義します。
2.  **連携**: `tauri.conf.json`が`Cargo.toml`を自動的に読み込み、ビルド時にアプリに埋め込みます。
3.  **取得**: フロントエンドからは `@tauri-apps/api/app` の `getVersion()` を使うことで、いつでもバージョン番号を取得できます。

```typescript
import { getVersion } from '@tauri-apps/api/app';
const appVersion = await getVersion(); // "x.y.z"
```

### リリース作成フロー

1.  **`main`ブランチを最新化**:
    - リリース対象の機能がすべて`main`にマージされていることを確認します。
2.  **バージョン更新**:
    - `src-tauri/Cargo.toml` の `version` を更新します。
3.  **コミット**:
    - バージョン更新をコミットします (`git commit -m "chore: Bump version to vX.Y.Z"`)。
4.  **アプリケーションのビルド**:
    - `cargo tauri build` を実行し、配布用の成果物 (`.dmg`など) を作成します。
5.  **GitHubリリース作成**:
    - `gh release create` を使い、**`Cargo.toml`と全く同じバージョン番号**でタグとリリースを作成します。
    - `--generate-notes` を使えば、リリースノートを自動生成できます。

    ```bash
    # 例: v0.2.0 のリリース
    gh release create v0.2.0 \\
        --generate-notes \\
        --title "ReelVault v0.2.0" \\
        src-tauri/target/release/bundle/macos/ReelVault.dmg
    ```

## 自動化スクリプト設計

### スクリプト構造
```python
#!/usr/bin/env python3
"""
[スクリプトの目的・機能説明]
"""
import subprocess, json, time, os

def run_gh_command(command):
    """gh CLI実行の共通関数"""
    
def main():
    """メイン処理：進捗表示・エラーハンドリング・結果集計"""
    
if __name__ == "__main__":
    main()
```

### スクリプト命名規則
- `create-*`: 新規作成系
- `update-*`: 既存更新系  
- `fix-*`: 修正・復旧系
- `cleanup-*`: 削除・整理系
- `check-*`: 確認・分析系

## プロジェクト管理の落とし穴回避

### よくある問題と対策
1. **文字化け**: GitHub API + エスケープ文字 → ファイルベース更新
2. **進捗率異常**: 古いIssueがマイルストーン残存 → 定期クリーンアップ
3. **関係性不明**: Epic-Issue関係が不明確 → Tasklist + 相互参照
4. **Issue肥大化**: 完了条件が冗長 → シンプルな構造に統一

### 定期メンテナンス
- **月1回**: 不要Issueのマイルストーン除去
- **フェーズ開始時**: Issue構造・関係性の見直し
- **技術変更時**: ラベル・Issue内容の移行

## チーム開発での活用

### コミュニケーション
- **Epic概要**: 各Epicの目的・スコープを明確に
- **進捗共有**: Epic Tasklistでの可視化
- **依存関係**: ブロッカー・前提条件の明記

### 品質管理
- **Issue粒度**: 3-5日で完了可能なサイズ
- **完了条件**: テスト可能・検証可能な条件
- **レビュー**: Epic単位での設計レビュー

## コード作成・編集時の指針

### プログラミング原則
- **即座に実行可能**: 生成されたコードは追加設定なしで実行可能
- **エラーハンドリング**: 適切な例外処理とログ出力
- **可読性重視**: 明確な変数名・関数名・コメント
- **モジュール化**: 再利用可能な関数・クラス設計

### 技術スタック対応
- **Tauri**: Rust + React + TypeScript構成を前提
- **AWS SDK**: S3, STS, Credentials（実認証・権限チェック実装済み）
- **セキュリティ**: macOS Keychain統合（keyring）、Ring暗号化
- **インフラ**: S3, Deep Archive, IAM, CloudFormationを活用
- **GitHub**: CLI (gh) を使った自動化を推奨
- **Python**: スクリプト作成時は`python3`使用、UTF-8エンコーディング

### 問題解決アプローチ
1. **問題特定**: 現状分析と根本原因の特定
2. **解決策提示**: 複数選択肢から最適解を推奨
3. **実装実行**: 即座にスクリプト/コード作成
4. **検証確認**: 実行結果の検証と修正提案

## プロジェクト固有ルール

### ReelVault開発における優先順位
1. **Phase 1**: インフラ基盤 ✅ **完了** (Epic #34: 28個API、AWS認証、設定管理)
2. **Phase 2**: ファイル処理エンジン（次フェーズ）→ UI → 品質保証
3. **Epic管理**: 階層構造でのタスク管理
4. **進捗追跡**: GitHubマイルストーン・Tasklistの活用
5. **技術選択**: Tauri, Rust, AWS SDK, macOS Keychain, S3 Deep Archiveが中心

### 作業効率化
- **自動化優先**: 手動作業は可能な限りスクリプト化
- **バッチ処理**: 複数Issue操作は一括実行
- **安全な操作**: ファイルベースでのGitHub API利用
- **復旧手順**: 問題発生時の即座対応

## 🚨 UI開発における重要な注意事項

### **新しいUIコンポーネント作成時の必須チェックリスト**

新しいUIコンポーネントを作成する際は、以下の手順を**必ず**実行すること：

#### **1. ファイル作成前の確認**
- [ ] 既存の類似コンポーネントがないか確認
- [ ] コンポーネント名が既存のものと重複していないか確認
- [ ] 作成するコンポーネントが本当に必要か検討

#### **2. コンポーネント作成時**
- [ ] **最終的な名前**で最初から作成する（後で名前変更しない）
- [ ] **一意で明確な名前**を使用する（`Simple*`、`Test*`などの仮名は避ける）
- [ ] TypeScript型定義を正しく設定する
- [ ] 必要なimportを全て含める
- [ ] **既存デザインシステムを踏襲**する（カラーパレット、フォント、スペーシング）
- [ ] **テーマ設定に対応**する（ダーク/ライトテーマ切り替え考慮）

#### **3. 統合時の必須確認**
- [ ] 親コンポーネントでの**import文**が正しいか確認
- [ ] 親コンポーネントでの**使用箇所**が正しいか確認
- [ ] **型定義の整合性**を確認
- [ ] **プロパティの受け渡し**が正しいか確認

#### **4. 不要ファイル削除時の必須確認**
- [ ] 削除対象ファイルを**全て特定**する
- [ ] 削除対象ファイルへの**全ての参照**を特定する
- [ ] **import文**を全て修正・削除する
- [ ] **使用箇所**を全て修正・削除する
- [ ] **型定義**の参照を全て確認する

### **よくある失敗パターンと対策**

#### **❌ 失敗パターン1: 仮名でコンポーネント作成**
```typescript
// ❌ 悪い例
SimpleUpload.tsx → UploadManager.tsx に後で変更
SimpleProgressTest.tsx → 後で削除
```

#### **✅ 正しいアプローチ**
```typescript
// ✅ 良い例
最初から UploadManager.tsx で作成
テスト用なら UploadManagerTest.tsx（明確に区別）
```

#### **❌ 失敗パターン2: 参照の修正漏れ**
```typescript
// ❌ ファイル削除後も参照が残る
import { SimpleUploadManager } from './SimpleUploadManager'; // ファイルが存在しない
<SimpleUploadManager /> // コンポーネントが存在しない
```

#### **✅ 正しいアプローチ**
```typescript
// ✅ 削除前に全参照を確認・修正
1. grep検索で全参照を特定
2. import文を全て修正
3. 使用箇所を全て修正
4. 型定義を確認
5. 最後にファイル削除
```

### **必須ツールの活用**

#### **参照確認コマンド**
```bash
# ファイル削除前に必ず実行
grep -r "ComponentName" src/
grep -r "component-file-name" src/
```

#### **TypeScriptエラーの確認**
```bash
# 修正後に必ず実行
npm run type-check
# または
tsc --noEmit
```

### **開発フローの改善**

#### **段階的開発アプローチ**
1. **設計フェーズ**: コンポーネント構造を事前に設計
2. **命名フェーズ**: 最終的な名前を決定
3. **作成フェーズ**: 正しい名前で一度に作成
4. **統合フェーズ**: 参照関係を正しく設定
5. **テストフェーズ**: 動作確認
6. **クリーンアップフェーズ**: 不要ファイルの安全な削除

#### **品質チェックポイント**
- [ ] コンパイルエラーなし
- [ ] TypeScriptエラーなし
- [ ] 実行時エラーなし
- [ ] 不要ファイルなし
- [ ] 未使用import文なし
- [ ] **デザイン統一性**確認（既存コンポーネントとの一貫性）
- [ ] **テーマ対応**確認（ダーク/ライトテーマでの表示確認）
- [ ] **レスポンシブ対応**確認（異なる画面サイズでの表示確認）

### **緊急時の対処法**

#### **参照エラーが発生した場合**
1. エラーメッセージから対象ファイル・行を特定
2. 正しいimport文に修正
3. 正しいコンポーネント名に修正
4. 型定義を確認・修正
5. 再コンパイル・テスト

#### **大量の参照エラーが発生した場合**
1. 一度に全て修正しようとしない
2. 一つずつ確実に修正
3. 各修正後にコンパイル確認
4. 動作テスト実行

### **ReelVaultデザインシステム準拠**

#### **カラーパレット（ダークテーマベース）**
```css
/* 基本色 */
--bg-primary: #1a1a1a;        /* メイン背景 */
--bg-secondary: #2a2a2a;      /* セカンダリ背景 */
--bg-tertiary: #333333;       /* サードレベル背景 */

/* テキスト色 */
--text-primary: #ffffff;      /* メインテキスト */
--text-secondary: #cccccc;    /* セカンダリテキスト */
--text-muted: #888888;        /* 補助テキスト */

/* アクセント色 */
--accent-primary: #4CAF50;    /* 成功・プライマリアクション */
--accent-secondary: #2196F3;  /* 情報・セカンダリアクション */
--accent-warning: #ff9800;    /* 警告 */
--accent-error: #f44336;      /* エラー */

/* ボーダー・区切り線 */
--border-primary: #444444;    /* メインボーダー */
--border-secondary: #555555;  /* セカンダリボーダー */
```

#### **統一コンポーネントスタイル**
```css
/* ボタンスタイル */
.btn-primary {
  background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
  color: white;
  border: none;
  border-radius: 8px;
  padding: 10px 20px;
  font-weight: bold;
  cursor: pointer;
  transition: all 0.3s ease;
}

.btn-secondary {
  background: linear-gradient(135deg, #666 0%, #555 100%);
  color: white;
  border: 2px solid #777;
  border-radius: 8px;
  padding: 8px 18px;
  cursor: pointer;
  transition: all 0.3s ease;
}

/* 入力フィールド */
.input-field {
  background: #2a2a2a;
  border: 2px solid #555;
  border-radius: 6px;
  color: #ffffff;
  padding: 8px 12px;
  transition: border-color 0.3s ease;
}

.input-field:focus {
  border-color: #4CAF50;
  outline: none;
}

/* パネル・カード */
.panel {
  background: linear-gradient(135deg, #2a2a2a 0%, #1e1e1e 100%);
  border: 2px solid #444;
  border-radius: 12px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
}
```

#### **必須デザイン要素**
- [ ] **グラデーション背景**: `linear-gradient(135deg, ...)`を使用
- [ ] **角丸**: `border-radius: 8px`以上を使用
- [ ] **シャドウ**: `box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3)`
- [ ] **トランジション**: `transition: all 0.3s ease`でスムーズなアニメーション
- [ ] **アイコン**: 絵文字アイコンを積極的に使用（🎯、⚙️、📁など）

#### **テーマ対応の実装**
```typescript
// テーマコンテキストの使用例
const theme = useTheme(); // ダーク/ライトテーマの状態取得

// CSS変数での動的テーマ切り替え
const themeStyles = {
  backgroundColor: theme.isDark ? '#1a1a1a' : '#ffffff',
  color: theme.isDark ? '#ffffff' : '#000000',
};
```

---

このルールは ReelVault プロジェクトでの GitHub Issues 管理・Tauri開発経験に基づいて作成されました。
技術移行、Issue階層化、進捗管理、自動化、問題解決の実践的ノウハウをまとめています。

**重要**: これらのルールは実際の開発で発生した問題を基に作成されています。
同じ過ちを繰り返さないよう、新しいUI開発時は必ずこのチェックリストを参照してください。
