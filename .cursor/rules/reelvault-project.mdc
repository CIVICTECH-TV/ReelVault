---
description: 
globs: 
alwaysApply: true
---
# ReelVault プロジェクト Cursor ルール

## 基本方針
- 常に日本語で回答する
- GitHub Issues管理とプロジェクト運営のベストプラクティスに従う
- 実践的で具体的なソリューションを提供する
- エラー発生時は即座に修復方法を提案する

## GitHub Issues管理のベストプラクティス

### Epic-Issue階層構造設計
- **Epic Issue**: 大きな機能単位でグループ化（例：インフラ基盤、ファイル処理エンジン）
- **Story/Task Issue**: Epic内の具体的なタスク
- **関係性**: Epic内にTasklistでチェックボックス形式、子IssueにParent Epic参照を記載
- **依存関係**: Issue本文内の「関係性」セクションで明記

### Issue内容構造
```markdown
## 概要
[簡潔な1-2行の説明]

## 詳細
[技術的詳細・要件・制約]

### 主要機能/コンポーネント
- [項目1]: [説明]
- [項目2]: [説明]

### 技術要件
- [技術スタック]
- [必要なライブラリ・ツール]

## 完了条件
- [ ] [具体的なタスク1]
- [ ] [具体的なタスク2]

## 関係性
**Parent Epic**: #[Epic Issue番号]

This issue is part of Epic #[番号]. Please check the Epic for overall progress and context.
```

### ラベル戦略
- **階層ラベル**: `epic`, `story`, `task`
- **技術ラベル**: `tauri`, `rust`, `aws`, `infrastructure`
- **状態ラベル**: `ready`, `in-progress`, `blocked`
- **優先度**: 必要に応じて`high-priority`, `low-priority`

### マイルストーン管理
- **統一マイルストーン**: 開発フェーズごと（例：Phase 1）
- **期限設定**: 現実的な期限（例：3ヶ月）
- **進捗追跡**: アクティブなIssueのみマイルストーン設定
- **クリーンアップ**: 完了・不要Issueはマイルストーン除去

## GitHub API操作のベストプラクティス

### 安全なAPI操作
```python
# 文字化け回避：ファイルベースでJSON送信
temp_file = f"/tmp/issue_update.json"
with open(temp_file, 'w', encoding='utf-8') as f:
    json.dump(data, f, ensure_ascii=False, indent=2)

cmd = f'gh api repos/{repo}/issues/{number} --input {temp_file}'
```

### エラーハンドリング
- **API制限**: 処理間に`time.sleep(0.5)`
- **エンコーディング**: `encoding='utf-8'`指定
- **エラー分類**: 4xx（クライアント）vs 5xx（サーバー）
- **リトライ戦略**: 一時的エラーに対するリトライ

### バッチ処理
- **進捗表示**: 処理中Issue番号・タイトル表示
- **結果集計**: 成功・失敗・スキップ数を集計
- **部分実行**: 失敗した場合の再実行可能性

## プロジェクト移行のベストプラクティス

### 技術スタック移行時
1. **新技術用ラベル追加**: 移行先技術のラベル作成
2. **不要Issue削除**: 旧技術関連Issueのクローズ・除去
3. **新Issue作成**: 新技術に特化したIssue作成
4. **関係性再構築**: Epic-Issue関係の再設定

### Issue内容移行
- **内容復元**: 文字化け時の正しい内容での復元
- **構造統一**: 全Issueで統一されたマークダウン構造
- **関係性保持**: Epic Tasklist + 相互参照コメント

### プロジェクト状態リセット
- **マイルストーンクリーンアップ**: 古いIssueからマイルストーン除去
- **進捗率リセット**: 新フェーズ開始時の0%状態
- **アクティブIssue特定**: 現在の開発対象のみ残す

## GitHub CLI (gh) 活用

### 基本コマンドパターン
```bash
# Issue一覧取得
gh api repos/{owner}/{repo}/issues --paginate

# Issue更新
gh api repos/{owner}/{repo}/issues/{number} --input file.json

# マイルストーン除去
{"milestone": null}  # 空文字列ではなくnull

# ラベル追加
gh api repos/{owner}/{repo}/issues/{number}/labels -f labels[]="label-name"
```

### JSON操作
- **null値**: `{"field": null}` でフィールドクリア
- **配列追加**: `{"labels": ["label1", "label2"]}`
- **エスケープ回避**: ファイルベース更新推奨

## 自動化スクリプト設計

### スクリプト構造
```python
#!/usr/bin/env python3
"""
[スクリプトの目的・機能説明]
"""
import subprocess, json, time, os

def run_gh_command(command):
    """gh CLI実行の共通関数"""
    
def main():
    """メイン処理：進捗表示・エラーハンドリング・結果集計"""
    
if __name__ == "__main__":
    main()
```

### スクリプト命名規則
- `create-*`: 新規作成系
- `update-*`: 既存更新系  
- `fix-*`: 修正・復旧系
- `cleanup-*`: 削除・整理系
- `check-*`: 確認・分析系

## プロジェクト管理の落とし穴回避

### よくある問題と対策
1. **文字化け**: GitHub API + エスケープ文字 → ファイルベース更新
2. **進捗率異常**: 古いIssueがマイルストーン残存 → 定期クリーンアップ
3. **関係性不明**: Epic-Issue関係が不明確 → Tasklist + 相互参照
4. **Issue肥大化**: 完了条件が冗長 → シンプルな構造に統一

### 定期メンテナンス
- **月1回**: 不要Issueのマイルストーン除去
- **フェーズ開始時**: Issue構造・関係性の見直し
- **技術変更時**: ラベル・Issue内容の移行

## チーム開発での活用

### コミュニケーション
- **Epic概要**: 各Epicの目的・スコープを明確に
- **進捗共有**: Epic Tasklistでの可視化
- **依存関係**: ブロッカー・前提条件の明記

### 品質管理
- **Issue粒度**: 3-5日で完了可能なサイズ
- **完了条件**: テスト可能・検証可能な条件
- **レビュー**: Epic単位での設計レビュー

## コード作成・編集時の指針

### プログラミング原則
- **即座に実行可能**: 生成されたコードは追加設定なしで実行可能
- **エラーハンドリング**: 適切な例外処理とログ出力
- **可読性重視**: 明確な変数名・関数名・コメント
- **モジュール化**: 再利用可能な関数・クラス設計

### 技術スタック対応
- **Tauri**: Rust + React + TypeScript構成を前提
- **AWS SDK**: S3, STS, Credentials（実認証・権限チェック実装済み）
- **セキュリティ**: macOS Keychain統合（keyring）、Ring暗号化
- **インフラ**: S3, Deep Archive, IAM, CloudFormationを活用
- **GitHub**: CLI (gh) を使った自動化を推奨
- **Python**: スクリプト作成時は`python3`使用、UTF-8エンコーディング

### 問題解決アプローチ
1. **問題特定**: 現状分析と根本原因の特定
2. **解決策提示**: 複数選択肢から最適解を推奨
3. **実装実行**: 即座にスクリプト/コード作成
4. **検証確認**: 実行結果の検証と修正提案

## プロジェクト固有ルール

### ReelVault開発における優先順位
1. **Phase 1**: インフラ基盤 ✅ **完了** (Epic #34: 28個API、AWS認証、設定管理)
2. **Phase 2**: ファイル処理エンジン（次フェーズ）→ UI → 品質保証
3. **Epic管理**: 階層構造でのタスク管理
4. **進捗追跡**: GitHubマイルストーン・Tasklistの活用
5. **技術選択**: Tauri, Rust, AWS SDK, macOS Keychain, S3 Deep Archiveが中心

### 作業効率化
- **自動化優先**: 手動作業は可能な限りスクリプト化
- **バッチ処理**: 複数Issue操作は一括実行
- **安全な操作**: ファイルベースでのGitHub API利用
- **復旧手順**: 問題発生時の即座対応

---

このルールは ReelVault プロジェクトでの GitHub Issues 管理・Tauri開発経験に基づいて作成されました。
技術移行、Issue階層化、進捗管理、自動化、問題解決の実践的ノウハウをまとめています。
