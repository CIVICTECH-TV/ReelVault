/**
 * „Éá„Éê„ÉÉ„Ç∞Áî®„Éò„É´„Éë„ÉºÈñ¢Êï∞
 * ÈñãÁô∫Áí∞Â¢É„Åß„ÅÆ„ÅøconsoleÂá∫Âäõ„ÇíË°å„ÅÜ
 */

// „Ç∑„É≥„Éó„É´„Å™Áí∞Â¢ÉÂà§ÂÆö
const isDevelopment = (import.meta as any).env?.DEV === true;

// ÈñãÁô∫Áí∞Â¢ÉÂà§ÂÆöÔºàÈñãÁô∫ËÄÖÂêë„ÅëÊ©üËÉΩ„ÅÆË°®Á§∫Âà∂Âæ°Áî®Ôºâ
export const isDev = (): boolean => {
  return (import.meta as any).env?.DEV === true;
};

// „É≠„Ç∞„É¨„Éô„É´ÂÆöÁæ©Ôºà„Ç∑„É≥„Éó„É´„Å™2ÊÆµÈöéÔºâ
type LogLevel = 'info' | 'debug';

// ÂâçÂõû„ÅÆ„É≠„Ç∞„É¨„Éô„É´„ÇíË®òÊÜ∂ÔºàÂ§âÊõ¥Ê§úÁü•Áî®Ôºâ
let lastLogLevel: LogLevel | null = null;

// ÁèæÂú®„ÅÆ„É≠„Ç∞„É¨„Éô„É´Ë®≠ÂÆö„ÇíÂèñÂæó
const getCurrentLogLevel = (): LogLevel => {
  try {
    // localStorage „Åã„ÇâË®≠ÂÆö„ÇíÂèñÂæó
    const configStr = localStorage.getItem('reelvault_config');
    if (configStr) {
      const config = JSON.parse(configStr);
      const logLevel = config.app_settings?.log_level;
      if (logLevel === 'debug') {
        return 'debug';
      }
    }
  } catch (error) {
    console.error('Failed to get log level from config:', error);
  }
  
  // „Éá„Éï„Ç©„É´„Éà„ÅØ info „É¨„Éô„É´
  return 'info';
};

// „É≠„Ç∞„É¨„Éô„É´Â§âÊõ¥„ÇíÊ§úÁü•„Åó„Å¶„É≠„Ç∞Âá∫Âäõ
const checkLogLevelChange = (): LogLevel => {
  const currentLevel = getCurrentLogLevel();
  
  if (lastLogLevel !== null && lastLogLevel !== currentLevel) {
    console.log(`üîÑ „É≠„Ç∞„É¨„Éô„É´Â§âÊõ¥Ê§úÁü•: ${lastLogLevel} ‚Üí ${currentLevel}`);
    if (currentLevel === 'debug') {
      console.log('üìä Ë©≥Á¥∞„Å™„Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÅåË°®Á§∫„Åï„Çå„Çã„Çà„ÅÜ„Å´„Å™„Çä„Åæ„Åó„Åü');
    } else {
      console.log('üìã Ê®ôÊ∫ñÁöÑ„Å™Âãï‰Ωú„É≠„Ç∞„ÅÆ„ÅøË°®Á§∫„Åï„Çå„Åæ„Åô');
    }
  }
  
  lastLogLevel = currentLevel;
  return currentLevel;
};

// „É≠„Ç∞Âá∫ÂäõÂà∂Âæ°Èñ¢Êï∞
export const logInfo = (message: any, ...args: any[]) => {
  // Info „É¨„Éô„É´„ÅØÂ∏∏„Å´Âá∫ÂäõÔºàÊ®ôÊ∫ñÁöÑ„Å™Âãï‰Ωú„É≠„Ç∞Ôºâ
  console.log(message, ...args);
};

export const logError = (message: any, ...args: any[]) => {
  // „Ç®„É©„Éº„ÅØÂ∏∏„Å´Âá∫Âäõ
  console.error(message, ...args);
};

export const logWarn = (message: any, ...args: any[]) => {
  // Ë≠¶Âëä„ÅØÂ∏∏„Å´Âá∫Âäõ
  console.warn(message, ...args);
};

export const logDebug = (message: any, ...args: any[]) => {
  // Debug „É¨„Éô„É´„ÅÆÂ†¥Âêà„ÅÆ„ÅøÂá∫ÂäõÔºàË©≥Á¥∞„Å™„Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±Ôºâ
  const currentLevel = checkLogLevelChange(); // Â§âÊõ¥Ê§úÁü•„ÇÇÂÆüË°å
  if (currentLevel === 'debug') {
    console.log('[DEBUG]', message, ...args);
  }
};

// ÂæåÊñπ‰∫íÊèõÊÄß„ÅÆ„Åü„ÇÅ„ÅÆ„Ç®„Ç§„É™„Ç¢„Çπ
export const debugLog = logDebug;
export const debugError = logError;
export const debugWarn = logWarn;
export const debugInfo = logInfo;

// ÁèæÂú®„ÅÆ„É≠„Ç∞„É¨„Éô„É´„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞ÔºàÂ§ñÈÉ®„Åã„ÇâÂèÇÁÖßÁî®Ôºâ
export const getLogLevel = (): LogLevel => {
  return checkLogLevelChange(); // Â§âÊõ¥Ê§úÁü•„ÇÇÂÆüË°å
};

// „Éá„Éê„ÉÉ„Ç∞Áî®: ÁèæÂú®„ÅÆÁí∞Â¢ÉÊÉÖÂ†±„ÇíÂá∫Âäõ
export const logEnvironmentInfo = () => {
  if (typeof window !== 'undefined' && window.location) {
    console.log('üîç Environment Info:', {
      hostname: window.location.hostname,
      protocol: window.location.protocol,
      href: window.location.href,
      'import.meta.env.DEV': (import.meta as any).env?.DEV,
      isDevelopment: isDevelopment
    });
  }
}; 